Statement: Considering a small programming language (that we shall call mini-language),
you have to write a scanner (lexical analyser)


Task 1: Minilanguage Specification

Deliverables: 

Lexic.txt (file containing mini language lexic description; see example)

token.in (containing the list of all tokens corresponding to the minilanguage)

Syntax.in - the syntactical rules of the language

The minilanguage can be a restricted form of a known programming language, and should contain the following:

- 2 simple data types and a user-defined type

- statements:

- assignment

- input/output

- conditional

- loop

- some conditions will be imposed on the way the identifiers and constants can be formed:

i) Identifiers: no more than 256 characters

ii) constants: corresponding to your types

Alphabet:

	a. Upper (A-Z) and lower case letters (a-z) of the English alphabet

	b. Underline character '_';
	
	c. Decimal digits (0-9);

Lexic:

    a.Special symbols, representing:

		- operators + - * / < > <= == >= <> 

		- separators () [ ] { }  : ; space ,

		- reserved words: decla arr char do else if int string char while show read with

    b.identifiers

		-a sequence of letters and  digits, such that the first character is a letter; the rule is:

		identifier = letter { letter | digit }

		letter = "A" | "B" | . ..| "Z" | "a" | "b" | . ..| "z"
		
		digit_excluding_zero = "1" | "2" |...| "9"
		
		digit = "0" | digit_excluding_zero


    c.constants
	
		1.integer - rule:

			nr = ["-" | "+"] digit_excluding_zero {digit} | "0" 
			
			digit_excluding_zero = "1" | "2" |...| "9"
		
			digit = "0" | digit_excluding_zero

		2.character

			char = 'letter' | 'digit'

		3.string

			string = "{character}"

			character = letter | digit
